from naoqi import ALProxy
import requests
import json

ROBOT_IP = "192.168.1.25"  # NAO robot's IP
PORT = 9559  # Port to connect to the NAO robot

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Initialize any necessary code here (if needed)
        pass

    def onUnload(self):
        # Clean up code here (if needed)
        pass

    def fetch_data(self):
        # LLaMA service URL
        llama_url = "http://192.168.1.22:8080/completion"  # Replace with correct URL
        headers = {"Content-Type": "application/json"}
        
        # Example prompt
        prompt = "Hi!"

        # Data for the POST request
        data = {
            "prompt": prompt,
            "n_predict": 50,
            "temperature": 0.7,
            "top_k": 10,
            "top_p": 0.8
        }

        try:
            print("=====> 11111")
            # Synchronously send the POST request
            response = requests.post(llama_url, headers=headers, data=json.dumps(data))
            llama_response = response.json()  # Wait for response
            print("=====> 22222")
            print("LLaMA Response:", llama_response)

            # Check for 'content' key in response
            if 'content' in llama_response:
                print('=====> 333333')
                response_text = llama_response['content'].strip()
                response_text = str(response_text)
                print("=====> 444444:", response_text)

                # Output the response text (pass to output slot)
                self.response(response_text)  # This is executed after the request completes

            else:
                print("LLaMA did not return any text.")
                self.response("No text returned from LLaMA service.")
        
        except Exception as e:
            print("Error calling LLaMA service:", e)
            self.response("Error calling LLaMA service")

        self.onStopped()  # Trigger the stop event to end the module

    def onInput_onStart(self):
        # Synchronously call fetch_data() and wait for the response
        self.fetch_data()  # This will block until the request completes and response is set

    def onInput_onStop(self):
        self.onUnload()  # Clean up resources
        self.onStopped()  # Stop the module
